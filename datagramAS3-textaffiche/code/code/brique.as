/** * Copyright marimototani ( http://wonderfl.net/user/marimototani ) * MIT License ( http://www.opensource.org/licenses/mit-license.php ) * Downloaded from: http://wonderfl.net/c/n6RK */// forked from testertester's flash on 2010-3-13package code {	/*import Box2D.Collision.Shapes.*;    import Box2D.Collision.Shapes.b2PolygonDef;	import Box2D.Collision.Shapes.b2CircleDef;    import Box2D.Collision.b2AABB;    import Box2D.Common.Math.b2Vec2;    import Box2D.Dynamics.b2Body;    import Box2D.Dynamics.b2BodyDef;    import Box2D.Dynamics.b2DebugDraw;    import Box2D.Dynamics.b2World;			import Box2D.Dynamics.b2ContactFilter;	import Box2D.Dynamics.b2ContactManager;	import Box2D.Dynamics.b2ContactListener;	*/		import Box2D.Collision.*;	import Box2D.Collision.Shapes.*;	import Box2D.Common.Math.*;	import Box2D.Dynamics.*;		import code.*;		import com.adobe.nativeExtensions.*;		import flash.display.*;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.display.StageQuality;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.text.*;	import flash.ui.*;	import flash.utils.Timer;	import flash.utils.getTimer;		import org.libspark.betweenas3.BetweenAS3;	import org.libspark.betweenas3.easing.Back;
	    public class brique extends Sprite {                private static const RADtoDEG:Number = 180 / Math.PI;                private static const NUM_ITERATIONS:int = 20; // entre les carrés (petit=superpose)        private static const DRAW_SCALE:Number = 30;        private var _world:b2World;        private var _lastTime:int;		private var DbgText:TextField = new TextField();				private var grav:int=0;		        public function brique() {			addEventListener(Event.ADDED_TO_STAGE, stageAddHandler);			           // stage.quality = StageQuality.LOW;           // scaleX = scaleY = DRAW_SCALE;                                   var worldAABB:b2AABB = new b2AABB();            worldAABB.lowerBound.Set(-100, -100);            worldAABB.upperBound.Set(465 + 100, 768 + 100);            _world = new b2World(worldAABB, new b2Vec2(0.0, 20.0), true);            					_world.SetContactListener( new ContactListener() );						addChild(canvas);			Helpers(displayHelp);          //  _buildFloor();						addChild(DbgText);			var fmt:TextFormat = new TextFormat('Verdana', 10, 0xffffff, true);			DbgText.defaultTextFormat = fmt;			DbgText.text = "test\n";			            _lastTime = getTimer();            addEventListener(Event.ENTER_FRAME, _update);            var timer:Timer = new Timer(150, 0);           // timer.addEventListener(TimerEvent.TIMER, _create);            //timer.start();			        }						private function stageAddHandler(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, stageAddHandler);			stage.addEventListener(KeyboardEvent.KEY_DOWN,KeyPressed);			//stage.addEventListener(MouseEvent.MOUSE_DOWN, function (e:MouseEvent){_createTxtBrique("popopol", stage.mouseX, stage.mouseY)});					}        		var fd:b2FilterData;		var sp:b2Shape;								/////////////   UPDATE  ////////        private function _update(e:Event):void {            var now:int = getTimer();            var dt:Number = now - _lastTime;            _lastTime = now;           // _world.Step(dt / 1000, NUM_ITERATIONS); // dt = fps 			_world.Step(1/30, NUM_ITERATIONS);			             for (var bb:b2Body = _world.m_bodyList; bb; bb = bb.m_next){                var px:Number = bb.GetPosition().x * DRAW_SCALE;                var py:Number = bb.GetPosition().y * DRAW_SCALE;               				if ((px < 0 - 50 || 1100 + 50 < px || 800 + 150 < py || py < -2000)					|| (bb.IsFrozen())) { 	                   					if (bb.GetUserData().name == "oiel") {						bb.m_userData.timer.stop();						bb.m_userData.timerBlanc.stop();					}					if (bb.GetUserData().name == "dutexte"){						bb.m_userData.timer.stop();					}					_world.DestroyBody(bb);					removeChild(bb.m_userData);                    break;                }								                if (bb.m_userData is Sprite){					if (bb.GetUserData().name == "dutexte") {						if (bb.m_userData.state==1){								fd = new b2FilterData();						sp = bb.GetShapeList();						fd.maskBits = 1|4|8;//0;//2|1;// | 4;//resiste au 1(brique) et 4 (les Z) et les 8 (E) mais pas au 2(les A)						sp.SetFilterData(fd);						_world.Refilter(sp);						}						if (bb.m_userData.state==2){							fd = new b2FilterData();							sp = bb.GetShapeList();							fd.maskBits = 1|8;//0;//2|1;// | 4;							sp.SetFilterData(fd);							_world.Refilter(sp);						}						if (bb.m_userData.state==3){							fd = new b2FilterData();							sp = bb.GetShapeList();							fd.maskBits = 0;							sp.SetFilterData(fd);							_world.Refilter(sp);						}						if (bb.m_userData.letexte==Main.censure){							_world.DestroyBody(bb);							removeChild(bb.m_userData);							break;						}					}					if (bb.GetUserData().name == "oiel") {												if (Main.aura == true) {							if (Math.random()>.4) bb.m_userData.aura.gotoAndPlay(int(Math.random()*15));						}						if (bb.m_userData.age>15) {							bb.m_userData.timer.stop();							bb.m_userData.timerBlanc.stop();							bb.m_userData.play();							//bb.m_userData.age+=1;							_world.DestroyBody(bb);						}						/*if (bb.m_userData.age==12){							removeChild(bb.m_userData);						}*/					}										                    bb.m_userData.x = bb.GetPosition().x* DRAW_SCALE;                    bb.m_userData.y = bb.GetPosition().y* DRAW_SCALE;                   if (bb.GetUserData().name != "oiel") bb.m_userData.rotation = bb.GetAngle() * RADtoDEG;                }            }			if (Main.aura) Main.aura = false;        }									//////////////				public var canvas:Sprite = new Sprite();		public var points_array:Array=new Array();		public var saved_x:int;		public var saved_y:int;												////// constructeurs TEXTE et oeil ///////						private function _buildFloor():void {var Floor:floor = new floor(DRAW_SCALE, _world);}				public function _createOielBrique(posx:int, posy:int, taille:int/*e:Event*/):void {						var rad : Number = Math.random()*15+taille;			var oielBrique:oiel = new oiel();			addChildAt(oielBrique, 1);			oielBrique.width =	oielBrique.height = rad * 2;			oielBrique.x = oielBrique.y = -rad;			oielBrique.name = "oiel";									//body def						var bd:b2BodyDef = new b2BodyDef();			bd.position.Set(posx / DRAW_SCALE, posy / DRAW_SCALE);						//shape def			//var sd:b2CircleDef = new b2CircleDef();			var sd:b2PolygonDef = new b2PolygonDef();			sd.filter.categoryBits=1;						rad=1/rad*DRAW_SCALE;			sd.vertexCount = 8			for (var i :int = 0; i < 8; i++) {				var angle:Number = -i/8.0 * 360 * Math.PI / 180;				sd.vertices[i].Set(Math.sin(angle)/rad, Math.cos(angle)/rad);			}							//sd.SetAsBox(oielBrique.width / 2 / DRAW_SCALE, oielBrique.height / 2 / DRAW_SCALE);			//sd.radius = rad / DRAW_SCALE;			sd.density = Math.random()*20;//10;			sd.restitution = Math.random()*.3+.3;//0.5;			sd.friction = Math.random()*.3+.2;			oielBrique.scaleX =	oielBrique.scaleY = oielBrique.scaleX + Math.random()*.2-.05;			oielBrique.S = oielBrique.scaleX;			bd.userData = oielBrique;						//body			var body:b2Body = _world.CreateBody(bd);			body.CreateShape(sd);			body.SetMassFromShapes();			////			var num:Number = Math.random() - 0.5;			body.SetAngularVelocity(num * Math.PI*2 * 10);			body.SetLinearVelocity(new b2Vec2(num * 10, -Math.random() * 2 - 5));									body.m_userData = oielBrique;					}						public function _createTxtBrique(str:String, posx:int, posy:int, agea:int, ageb:int, agec:int/*e:Event*/):void {						var bodyDef:b2BodyDef = new b2BodyDef();			bodyDef.angle = 0;//Math.random() * Math.PI * 2;			bodyDef.position.x = posx/DRAW_SCALE;//12;//(stage.stageWidth / 2 + (Math.random() - 0.5) * 200) / DRAW_SCALE;			bodyDef.position.y = posy/DRAW_SCALE;//13;//(300 - Math.random() * 50) / DRAW_SCALE;			var txtBrique:TxtBrique = addChildAt(new TxtBrique(str, agea, ageb, agec),1) as TxtBrique;			//txtBrique.y = -100;						var boxDef:b2PolygonDef = new b2PolygonDef();			boxDef.filter.categoryBits=1;			boxDef.SetAsBox(txtBrique.width / 2 / DRAW_SCALE, txtBrique.height / 2 / DRAW_SCALE);			boxDef.density = Math.random()*100;			boxDef.friction = Math.random()*.6+.2;			boxDef.restitution = Math.random()*.2+.1;						txtBrique.name = "dutexte";			bodyDef.userData = txtBrique;			//trace (bodyDef.userData.age);			txtBrique.scaleX = txtBrique.scaleY = 0;			BetweenAS3.tween(txtBrique, {scaleX: 1 , scaleY: 1 }, null, 1.5, Back.easeOut).play();						var body:b2Body = _world.CreateBody(bodyDef);			body.SetLinearVelocity(new b2Vec2(0, -7));			body.CreateShape(boxDef);			body.SetMassFromShapes();					}								///////////////////  creation du POLY //////////////						function dessinePoly (e:MouseEvent){			canvas.graphics.lineStyle(5,0xffffff);			if (points_array.length<2){					canvas.graphics.moveTo(mouseX,mouseY);				canvas.graphics.drawCircle(mouseX,mouseY, 5);				canvas.graphics.drawCircle(mouseX,mouseY, 5);			}else{				canvas.graphics.lineTo(mouseX,mouseY);			}			saved_x=mouseX;			saved_y=mouseY;			points_array.push(saved_x);			points_array.push(saved_y);		}								public function create_poly(bit):void {			//drawing=false;			var sx:int;			var ex:int;			var sy:int;			var ey:int;						var segments:int=points_array.length/2-1;						var body:b2Body;			var bodyDef:b2BodyDef = new b2BodyDef();									bodyDef.position.Set(mouseX/DRAW_SCALE,mouseY/DRAW_SCALE);			body = _world.CreateBody(bodyDef);									for (var i:int=0; i<segments; i++) {								var boxDef:b2PolygonDef = new b2PolygonDef();				boxDef.filter.categoryBits=bit;				//bodyDef.filter.maskBits=Math.ceil(4);				/*0x0002;				objectB.categoryBits = 0x0004;				objectC.categoryBits = 0x0008;				*/								boxDef.density = 0;				boxDef.friction = 1.0;				boxDef.restitution = 0.3;            								sx=points_array[i*2]-mouseX;				sy=points_array[i*2+1]-mouseY;				ex=points_array[i*2+2]-mouseX;				ey=points_array[i*2+3]-mouseY;								var hx:Number = VectorMath.magnitude(new b2Vec2(					ex - sx, 					ey - sy)) / DRAW_SCALE/2;								var center:b2Vec2 = new b2Vec2(					(sx + ex) / DRAW_SCALE/2, 					(sy + ey) / DRAW_SCALE/2);								var angle:Number = Math.atan2(					ey - sy, 					ex - sx);								boxDef.SetAsOrientedBox(hx+10/DRAW_SCALE, 5/DRAW_SCALE, center, angle); //longeur, espaisseur				body.CreateShape(boxDef);			}						body.SetMassFromShapes();									var s:Sprite = createSprite();			s.name = "drager "+bit;//idCnt.toString();			//idCnt++;			s.addChild(createLabel(s.name));			s.graphics.beginFill(0xffffff,0.9);			s.graphics.drawRect(-15,-15,25,25);			s.graphics.endFill();			body.m_userData = s;			addChildAt(s,2);									canvas.graphics.clear();			canvas.graphics.lineStyle(5);		}						private var target:b2Body;		private var prevX:Number;		private var prevY:Number;				public function createSprite():Sprite{			var s:Sprite = new Sprite();			s.alpha = 0.8;						s.addEventListener(MouseEvent.MOUSE_OVER,function(e:MouseEvent):void{				s.alpha = 1;				Mouse.cursor = MouseCursor.HAND;				//	stage.removeEventListener(MouseEvent.MOUSE_DOWN,mouse_pressed);				for (var b:b2Body = _world.GetBodyList(); b; b = b.GetNext()) {					if (b.GetUserData() is Sprite) {						if(b.GetUserData()==e.currentTarget){ 							//target = b;									DbgText.appendText(b.m_userData.name+" : over\n");							DbgText.scrollV = DbgText.maxScrollV;							break;						}					}				}			});						s.addEventListener(MouseEvent.MOUSE_OUT,function():void{//ロールアウト				s.alpha = 0.8;				Mouse.cursor = MouseCursor.ARROW;				//target = null;				//stage.addEventListener(MouseEvent.MOUSE_DOWN,mouse_pressed);			});						s.addEventListener(MouseEvent.MOUSE_DOWN,function(e:MouseEvent):void{//ドラッグ開始				for (var b:b2Body = _world.GetBodyList(); b; b = b.GetNext()) {					if (b.GetUserData() is Sprite) {					if(b.GetUserData()==e.currentTarget){ 							target = b;									DbgText.appendText(b.m_userData.name+" target\n");								DbgText.scrollV = DbgText.maxScrollV;							break;						}					}				}				//target.PutToSleep();//対象の物理運動を無効				var vec:b2Vec2 = target.GetPosition();				prevX = vec.x*DRAW_SCALE;				prevY = vec.y*DRAW_SCALE;				stage.addEventListener(MouseEvent.MOUSE_MOVE,onMove);			});						s.addEventListener(MouseEvent.MOUSE_UP,function():void{//リリース				stage.removeEventListener(MouseEvent.MOUSE_MOVE,onMove);				var vel:b2Vec2 = target.GetLinearVelocity().Copy();				vel.Add(new b2Vec2(0, 0));				target.SetLinearVelocity(vel);				target.WakeUp();				target = null;			});			return s;		}				private function createLabel(str:String):Bitmap{			var t:TextField = new TextField();			var fmt:TextFormat = new TextFormat('Verdana', 20, 0xffffff, true);			t.defaultTextFormat = fmt;			t.text = str;			t.selectable=false;			t.width = t.textWidth+5;			t.height = t.textHeight+5;			//t.border=true;						var btm_base:BitmapData = new BitmapData(t.width+1, t.height+1, true, 0xFFFFFF);			var btm:Bitmap = new Bitmap( btm_base);			btm_base.draw(t);			return btm;		}				private function onMove(e:MouseEvent):void{     			var mx:Number = mouseX-prevX;			var my:Number = mouseY-prevY;			var curPosition:b2Vec2 = target.GetPosition();			curPosition.Add(new b2Vec2(mx/DRAW_SCALE, my/DRAW_SCALE))			target.SetXForm(curPosition, target.GetAngle());			prevX = curPosition.x*DRAW_SCALE;			prevY = curPosition.y*DRAW_SCALE;			target.WakeUp()		}									///////////////							public var displayHelp:Boolean = true;				public function Helpers(help:Boolean){			var dbgDraw:b2DebugDraw = new b2DebugDraw();			dbgDraw.m_sprite = this;			if (help){				dbgDraw.m_drawScale = DRAW_SCALE;//1;//30.0;;				dbgDraw.m_fillAlpha = 0.3;				dbgDraw.m_lineThickness = 2;				//dbgDraw.m_drawFlags = 0xFFFFFFFF;				dbgDraw.m_drawFlags = b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit;			}			_world.SetDebugDraw(dbgDraw);							for (var b:b2Body = _world.GetBodyList(); b; b = b.GetNext()) {				if (b.GetUserData() is Sprite) {					if(b.GetUserData().name.substr(0, 6)=="drager"){ 						b.GetUserData().visible=help;					}				}			}						DbgText.visible = help;						//un cache ?			/*var sh:Sprite=new Sprite();			sh.graphics.beginFill(0,0.2);			sh.graphics.drawRect(1, 1, 15, 15);			sh.graphics.endFill();			addChild(sh);			*/						}								function KeyPressed(event:KeyboardEvent){			//trace (event.keyCode);				DbgText.appendText(event.keyCode+" key\n");			DbgText.scrollV = DbgText.maxScrollV;						if (event.keyCode == 72) { //H diplay help			displayHelp = !displayHelp;			Helpers(displayHelp);			}						if (event.keyCode == 84) { // T texte				_createTxtBrique("Hello World - ceci est un SMS - 06 95 57 76 75 ", stage.mouseX, stage.mouseY, 40, 80, 100);				if(this.parent != null){					var parentObj:Object = this.parent as Object;					parentObj._reseau.sender("srcText "+stage.mouseX + " "+ stage.mouseY);				}				}			if (event.keyCode == 79) { // O oeil				_createOielBrique(stage.mouseX, stage.mouseY, 5);				if(this.parent != null){					//var parentObj:Object = this.parent as Object;					//parentObj._reseau.sender("srcText "+stage.mouseX + " "+ stage.mouseY);				}				}									if (event.keyCode == 80) { // P dessine poly				points_array=new Array();				canvas.graphics.clear();				stage.addEventListener(MouseEvent.MOUSE_DOWN, dessinePoly); 			}						  if ((event.keyCode == 65)||(event.keyCode==90)||(event.keyCode==69)) { /// A-Z-E creer poly				  if (event.keyCode == 65) create_poly(2);				  if (event.keyCode == 90) create_poly(4);				  if (event.keyCode == 69) create_poly(8);			  stage.removeEventListener(MouseEvent.MOUSE_DOWN, dessinePoly);			  }  			  if (event.keyCode == 68) //D	erase poly					  if (target) {					  _world.DestroyBody(target);					  removeChild(target.m_userData); 				  }			 						  if (event.keyCode == 67){ // C chasse d'eau			 chassedo();			  }			  			  if (event.keyCode == 71) {/// G gravity				  if (grav ==1) grav = 0;				  else grav = 1;				  changeGrav(grav);			  }			  		}				public function changeGrav(gravi:int){				var b:b2Body = _world.GetBodyList()			if (gravi==1) _world.SetGravity( new b2Vec2(0, 10) );			else  _world.SetGravity( new b2Vec2(0, -15) ); 			for ( b; b; b = b.GetNext()) {				if (b.GetUserData() is Sprite) {					b.WakeUp();				}			}		}				public function chassedo(){			var b:b2Body = _world.GetBodyList()			for ( b; b; b = b.GetNext()) {				if (b.GetUserData() is Sprite) {					if(b.GetUserData().name.substr(0, 6)!="drager"){ 						var fd:b2FilterData = new b2FilterData();						var sp:b2Shape = b.GetShapeList();						fd.maskBits = 0;//2|1;// | 4;						sp.SetFilterData(fd);						_world.Refilter(sp);					}				}			} 		}				    }}import Box2D.Common.Math.*;class VectorMath{	public static function angle(v1:b2Vec2, v2:b2Vec2):Number	{return Math.acos((v1.x * v2.x + v1.y * v2.y) / (magnitude(v1) * magnitude(v2)));}	public static function magnitude(v:b2Vec2):Number	{return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y ,2));}}/*import Box2D.Dynamics.Contacts.*;import Box2D.Dynamics.*;import Box2D.Collision.*;import Box2D.Collision.Shapes.*;import Box2D.Common.Math.*;import Box2D.Collision.Shapes.*;import Box2D.Collision.Shapes.b2PolygonDef;*/	