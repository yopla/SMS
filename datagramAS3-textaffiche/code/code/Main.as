package code{		import code.*;		import com.adobe.nativeExtensions.*;		import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.display.StageQuality;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;		import net.hires.debug.Stats;	//import com.bit101.components.Label;	/*import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowSystemChrome;	import flash.display.NativeWindowType;	*/		public class Main extends MovieClip	{								public static var master:Boolean=false;		public static var cadreX:int=300;		public static var typo:int=20;		public static var lead:int=0;		public static var epaitrait:int=4		public static var life1:int=300;		public static var life2:int=450;		public static var life3:int=650;		public static var grav:int=0;				public static var censure:String;				public static var aura:Boolean=false;				/// classes		public var _reseau:reseau=new reseau();				public var osManage:osManager = new osManager();			//var _vibrate:Vibration = new Vibration();				public var Sauteur:sauteur = new sauteur();		public var Brique:brique = new brique();		//public var Traits:traits;				// boutons		public var debug_btn:SimpleButton;		public var menu_btn:SimpleButton;		public var ants_btn:SimpleButton;				public var go_btn:SimpleButton;		public var full_btn:SimpleButton;		public var cache:MovieClip;				//objets				 				public function Main()		{			addEventListener(Event.ADDED_TO_STAGE, stageAddHandler);			super();				}		public function stageAddHandler(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, stageAddHandler);						/*stage.scaleMode = StageScaleMode.NO_SCALE;			//stage.align = StageAlign.TOP_LEFT;			//nativeWindow.x = 200;			//this.stage.nativeWindow.width ;			stage.stageWidth = 100;			//Application.application.width = 100;			*/						stage.quality = StageQuality.LOW;									/// ecouteurs boutons			go_btn.addEventListener(MouseEvent.MOUSE_DOWN, ClickHandler);			full_btn.addEventListener(MouseEvent.MOUSE_DOWN, ClickHandler);			menu_btn.addEventListener(MouseEvent.MOUSE_DOWN, ClickHandler);			debug_btn.addEventListener(MouseEvent.MOUSE_DOWN, ClickHandler);					ants_btn.addEventListener(MouseEvent.MOUSE_DOWN, ClickHandler);										stage.addEventListener(KeyboardEvent.KEY_DOWN,KeyPressed);									cache.visible=false;			this.addChildAt(Brique,1);			this.addChildAt(Sauteur,2);									//stage.addEventListener(MouseEvent.MOUSE_DOWN, function (e:MouseEvent){Brique._createTxtBrique("popopol", mouseX, mouseY)});								showmenu(false);						// ajouts des classes systemes			this.addChildAt(_reseau, 0);			this.addChild(osManage);			_reseau.visible=false;						_reseau.sender("init")									function showmenu(disp:Boolean){			//lesBoutons.visible=disp;			debug_btn.visible=disp;			ants_btn.visible=disp;				}		}				var variable:String;	var id:int;	var id2:int;	var id3:int;	var valeur1:Number;	var valeur2:Number;			public function recoit(recu: String):void		{						// remplacer par array			//var arrayString:String=e.param; 					var body:Array= recu.split("/") 			//var body=String(body[1])		 	//trace (body);//						id = recu.indexOf("/");						if (id>0) variable = recu.substr(0, id);		else variable = recu;				if (body[0] == "saute") Sauteur._create(body[1]);				//if (variable == "saute") Sauteur._create(recu.substr(id+1));		//if (variable == "brique") Brique._createTxtBrique(recu.substr(id+1), 300,100);		if (body[0] == "brique") {			Brique._createTxtBrique(body[1], body[2],body[3], body[4],body[5],body[6]);			Main.aura = true;		}		if (body[0] == "oeil") Brique._createOielBrique(body[1], body[2],body[3] );				 //exemple de reception		if (body[0] == "cadreX") Main.cadreX=int(body[1]);		if (body[0] == "typo") Main.typo=int(body[1]);		if (body[0] == "lead") Main.lead=int(body[1]);		if (body[0] == "epaitrait") Main.epaitrait=int(body[1]);		if (body[0] == "grav") Brique.changeGrav(int(body[1]));		if (body[0] == "chassedo") Brique.chassedo();				if (body[0] == "censure") censure = body[1];				/*if (body[0] == "life1") Main.life1=int(body[1]);		if (body[0] == "life2") Main.life2=int(body[1]);		if (body[0] == "life3") Main.life3=int(body[1]);*/				if (body[0] == "trait") {			if (body[2] == "avant") lesTraits[body[1]].tweenAvant(body[3]);			if (body[2] == "arriere") lesTraits[body[1]].tweenArriere(body[3]);				if (body[2] == "round") lesTraits[body[1]].round=body[3];		}				/*if (variable == "brique")		{			trace ("recu");			id2 = recu.indexOf("x");			id3 = recu.indexOf("y");			valeur1 = int(recu.substr(id+1, id2-id-1));			valeur2 = int(recu.substr(id2+1, id3-id2-1));			Brique._createTxtBrique(recu.substr(id+1), valeur1,valeur2); 			trace (valeur1 + " "+valeur2);					}*/								}				///////////    ///////	/////		///////						function showmenu(disp:Boolean){			//lesBoutons.visible=disp;			debug_btn.visible=disp;			ants_btn.visible=disp;				}				var lesTraits:Vector.<traits> = new Vector.<traits>();		var num:int=0;		var selTraitHelp:int=0;				function KeyPressed(event:KeyboardEvent){					if (event.keyCode == 78) { // N			num++;			var Traits:traits = new traits(mouseX, mouseY);			lesTraits.push(Traits);			this.addChildAt(Traits,3);			_reseau.sender("plusTrait")			}						if (event.keyCode == 32) { //space				_reseau.sender("okPos")			}			if (event.keyCode == 74) { //J le cache				if (cache.visible == false) cache.visible=true;				else cache.visible=false;			}							//	trace (selTraitHelp);			if(event.keyCode == 37){ //37 is keycode for left arrow <--					for (var i:int=0; i < 	lesTraits.length; i++){					lesTraits[i].DrawHelp=true;					lesTraits[i].changeHelp();				}			selTraitHelp--;			selTraitHelp = Math.max(0, Math.min(selTraitHelp, lesTraits.length-1));			lesTraits[selTraitHelp].changeHelp();			//lesTraits[selTraitHelp].changeHelp();			}						if(event.keyCode == 39){ //39 is keycode for right arrow -->							for (i=0; i < 	lesTraits.length; i++){					lesTraits[i].DrawHelp=true;					lesTraits[i].changeHelp();				}				selTraitHelp++;				selTraitHelp = Math.max(0, Math.min(selTraitHelp, lesTraits.length-1));				lesTraits[selTraitHelp].changeHelp();				//lesTraits[selTraitHelp].changeHelp();			}						if(event.keyCode == 40){ //40 is keycode for down arrow				for ( i=0; i < 	lesTraits.length; i++){					lesTraits[i].DrawHelp=true;					lesTraits[i].changeHelp();				}			}						if(event.keyCode == 38){ //38 is keycode for up arrow				for (i=0; i < lesTraits.length; i++){					lesTraits[i].DrawHelp=false;					lesTraits[i].changeHelp();				}			}								}										public function ClickHandler(event:MouseEvent):void		{				switch( event.target )			{				case ants_btn:						break;															case debug_btn:					if (_reseau.visible==true){						_reseau.visible=false;					}else{_reseau.visible=true;					}					break;								case menu_btn:					if (debug_btn.visible==true){						showmenu(false);					}else{						showmenu(true);					}					break;												case go_btn :					_reseau.sender("ouvreporte")					break;								case full_btn :					_reseau.sender("full")					break;			}								}			}			}